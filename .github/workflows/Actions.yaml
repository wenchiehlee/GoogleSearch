name: FactSet Pipeline v3.3.3 - Final Integrated Edition

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      execution_mode:
        description: 'Execution strategy'
        required: false
        default: 'intelligent'
        type: choice
        options:
          - 'intelligent'     # Smart execution with v3.3.3 enhancements
          - 'conservative'    # High priority only, with delays
          - 'process_only'    # Process existing data only
          - 'enhanced'        # Full v3.3.3 features
          - 'v333'            # v3.3.3 complete feature set
      priority_focus:
        description: 'Search priority level'
        required: false
        default: 'high_only'
        type: choice
        options:
          - 'high_only'       # Top priority companies only
          - 'top_30'          # Top 30 companies
          - 'balanced'        # All companies (managed rate limiting)
      memory_limit:
        description: 'Memory limit (MB)'
        required: false
        default: '2048'
        type: string
      enable_quality_scoring:
        description: 'Enable v3.3.3 quality scoring'
        required: false
        default: true
        type: boolean
      log_level:
        description: 'Logging level'
        required: false
        default: 'info'
        type: choice
        options:
          - 'debug'
          - 'info'
          - 'warning'
  schedule:
    # Run daily at 2:10 AM UTC (optimal for rate limit resets)
    - cron: "10 2 * * *"

env:
  PYTHONIOENCODING: utf-8
<<<<<<< HEAD
  FACTSET_PIPELINE_VERSION: "3.3.3"
=======
  FACTSET_PIPELINE_VERSION: "3.3.2"
>>>>>>> db9f3e3e8b34753ccab4237fc0b24ef959adc931
concurrency: 
  group:  ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
jobs:
  # v3.3.3 Enhanced Validation with Quality System
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      status: ${{ steps.validate.outputs.status }}
      recommendation: ${{ steps.validate.outputs.recommendation }}
      data_quality: ${{ steps.validate.outputs.data_quality }}
      quality_check: ${{ steps.validate.outputs.quality_check }}
      v333_features: ${{ steps.validate.outputs.v333_features }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ v3.3.3 dependencies installed"
    
    - name: 🧪 v3.3.3 Comprehensive System Validation
      id: validate
      env:
        GOOGLE_SEARCH_API_KEY: ${{ secrets.GOOGLE_SEARCH_API_KEY }}
        GOOGLE_SEARCH_CSE_ID: ${{ secrets.GOOGLE_SEARCH_CSE_ID }}
        GOOGLE_SHEETS_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
        GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
      run: |
        echo "🧪 Running v3.3.3 comprehensive validation with quality scoring..."
        
        # v3.3.3 Enhanced validation with quality features
        python factset_cli.py validate \
          --comprehensive \
          --v333-features \
          --quality-scoring=${{ github.event.inputs.enable_quality_scoring || 'true' }} \
          --github-actions
        
        # v3.3.3 Modern GitHub Actions outputs using GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT
        echo "recommendation=proceed" >> $GITHUB_OUTPUT
        echo "data_quality=good" >> $GITHUB_OUTPUT
        echo "quality_check=enabled" >> $GITHUB_OUTPUT
        echo "v333_features=validated" >> $GITHUB_OUTPUT
        
        echo "✅ v3.3.3 validation completed successfully"

  # v3.3.3 Main Pipeline with Quality Scoring
  pipeline:
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours max
    if: needs.validate.outputs.status == 'success'
    outputs:
      pipeline_status: ${{ steps.pipeline.outputs.status }}
      companies_processed: ${{ steps.pipeline.outputs.companies_processed }}
      quality_average: ${{ steps.pipeline.outputs.quality_average }}
      quality_distribution: ${{ steps.pipeline.outputs.quality_distribution }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ v3.3.3 environment ready"
    
    - name: 🚀 Execute v3.3.3 Enhanced Pipeline
      id: pipeline
      env:
        GOOGLE_SEARCH_API_KEY: ${{ secrets.GOOGLE_SEARCH_API_KEY }}
        GOOGLE_SEARCH_CSE_ID: ${{ secrets.GOOGLE_SEARCH_CSE_ID }}
        GOOGLE_SHEETS_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
        GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
      run: |
        echo "🚀 Starting v3.3.3 enhanced pipeline with quality scoring..."

        python factset_cli.py pipeline \
          --mode=${{ github.event.inputs.execution_mode || 'intelligent' }} \
          --priority=${{ github.event.inputs.priority_focus || 'high_only' }} \
          --memory-limit=${{ github.event.inputs.memory_limit || '2048' }} \
          --batch-size=25 \
          --quality-scoring=${{ github.event.inputs.enable_quality_scoring || 'true' }} \
          --standardize-quality \
          --v333 \
          --log-level=${{ github.event.inputs.log_level || 'info' }} \
          --github-actions

        echo "📊 Extracting v3.3.3 pipeline statistics..."
        
        # v3.3.3 Extract and output pipeline statistics using modern GITHUB_OUTPUT
        if [ -f "logs/latest/pipeline_stats.json" ]; then
          companies_processed=$(cat logs/latest/pipeline_stats.json | jq -r '.companies_processed // 0')
          quality_average=$(cat logs/latest/pipeline_stats.json | jq -r '.quality_analysis_v333.average_quality_score // 0')
          quality_dist=$(cat logs/latest/pipeline_stats.json | jq -c '.quality_analysis_v333.quality_distribution // {}')
          
          echo "status=completed" >> $GITHUB_OUTPUT
          echo "companies_processed=${companies_processed}" >> $GITHUB_OUTPUT
          echo "quality_average=${quality_average}" >> $GITHUB_OUTPUT
          echo "quality_distribution=${quality_dist}" >> $GITHUB_OUTPUT
        else
          echo "status=partial" >> $GITHUB_OUTPUT
          echo "companies_processed=0" >> $GITHUB_OUTPUT
          echo "quality_average=0" >> $GITHUB_OUTPUT
          echo "quality_distribution={}" >> $GITHUB_OUTPUT
        fi
        
        echo "✅ v3.3.3 pipeline execution completed"

    - name: 📊 Generate v3.3.3 Quality Report
      if: always()
      run: |
        echo "📊 Generating comprehensive v3.3.3 quality report..."
        python factset_cli.py report \
          --format=github-summary \
          --v333-metrics \
          --quality-analysis \
          --include-md-links
    
    - name: 🎯 v3.3.3 Quality Analysis Summary  
      if: always()
      run: |
        echo "🎯 Generating v3.3.3 quality analysis summary..."
        python factset_cli.py quality \
          --distribution \
          --export-summary \
          --github-format
    
    - name: 💾 Commit and Push v3.3.3 Results
      if: always()
      run: |
        echo "💾 Committing v3.3.3 results to repository..."
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add -A
        git commit -m "⬆️ v3.3.3 Pipeline Results - Quality Scoring $(date)" || true
        git push || true
        echo "✅ v3.3.3 results committed to repository"

  # v3.3.3 Enhanced Recovery with Quality Diagnostics
  recovery:
    needs: [validate, pipeline]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: failure()
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ v3.3.3 recovery environment ready"
    
    - name: 🔄 v3.3.3 Enhanced Recovery with Quality Diagnostics
      env:
        GOOGLE_SHEETS_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
        GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
      run: |
        echo "🔄 Starting v3.3.3 enhanced recovery process..."
        python factset_cli.py recover \
          --analyze \
          --fix-common-issues \
          --v333-diagnostics \
          --quality-system-check \
          --github-actions
    
    - name: 📋 Generate v3.3.3 Recovery Report
      if: always()
      run: |
        echo "📋 Generating v3.3.3 recovery report..."
        python factset_cli.py report \
          --format=github-summary \
          --recovery-mode \
          --v333-analysis
    
    - name: 💾 Commit v3.3.3 Recovery Results
      if: always()
      run: |
        echo "💾 Committing v3.3.3 recovery results..."
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add -A
        git commit -m "🔄 v3.3.3 Recovery Results - Quality Diagnostics $(date)" || true
        git push || true

  # v3.3.3 Comprehensive Status Summary
  summary:
    needs: [validate, pipeline, recovery]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    
    steps:
    - name: 📊 v3.3.3 Final Integrated Edition Summary
      env:
        GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
      run: |
        echo "## 📊 FactSet Pipeline v3.3.3 - Final Integrated Edition" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: v3.3.3 (Final Integrated Edition)" >> $GITHUB_STEP_SUMMARY
        echo "**Release Type**: Production Ready with Quality Scoring" >> $GITHUB_STEP_SUMMARY
        echo "**Execution Mode**: ${{ github.event.inputs.execution_mode || 'intelligent' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Priority Focus**: ${{ github.event.inputs.priority_focus || 'high_only' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Memory Limit**: ${{ github.event.inputs.memory_limit || '2048' }}MB" >> $GITHUB_STEP_SUMMARY
        echo "**Quality Scoring**: ${{ github.event.inputs.enable_quality_scoring || 'true' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Log Level**: ${{ github.event.inputs.log_level || 'info' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.validate.result }}" = "success" ]; then
          echo "✅ **Validation**: Passed (v3.3.3 features validated)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Validation**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.pipeline.result }}" = "success" ]; then
          echo "✅ **Pipeline**: Completed successfully with quality scoring" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ needs.pipeline.outputs.companies_processed }}" ]; then
            echo "📈 **Companies Processed**: ${{ needs.pipeline.outputs.companies_processed }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "${{ needs.pipeline.outputs.quality_average }}" ]; then
            echo "🎯 **Average Quality Score**: ${{ needs.pipeline.outputs.quality_average }}/10" >> $GITHUB_STEP_SUMMARY
          fi
        elif [ "${{ needs.pipeline.result }}" = "failure" ]; then
          echo "❌ **Pipeline**: Failed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Pipeline**: Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.recovery.result }}" = "success" ]; then
          echo "🔄 **Recovery**: Executed successfully with v3.3.3 diagnostics" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.recovery.result }}" = "failure" ]; then
          echo "❌ **Recovery**: Failed" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **Recovery**: Not needed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🆕 v3.3.3 Final Integrated Features" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Standardized Quality Scoring**: 0-10 scale with 🟢🟡🟠🔴 indicators" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **GitHub Actions Modernization**: Fixed deprecated set-output warnings" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **GitHub Raw MD Links**: Direct access to analysis files" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Live Dashboard Optimization**: Corrected URL pointing" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Quality Distribution Analysis**: Complete metrics breakdown" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Maintained v3.3.2 + v3.3.1 Enhancements" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Unified CLI Interface**: Cross-platform command consistency" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Stage-specific Dual Logging**: Console + file output" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Enhanced Observability**: Automated diagnostics and recovery" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Simplified Workflow**: 80% reduction in Actions.yml complexity" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Timeout Protection**: 3-hour limit with early termination" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **All Previous Fixes**: Performance and reliability preserved" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ secrets.GOOGLE_SHEET_ID }}" ]; then
          echo "📈 **Live Dashboard**: [View Results](https://docs.google.com/spreadsheets/d/${{ secrets.GOOGLE_SHEET_ID }}/edit)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
<<<<<<< HEAD
        echo "### 🎯 v3.3.3 Quality Score Legend" >> $GITHUB_STEP_SUMMARY
        echo "- 🟢 **9-10**: Complete (完整) - Comprehensive data with high analyst coverage" >> $GITHUB_STEP_SUMMARY
        echo "- 🟡 **8**: Good (良好) - Good data quality with adequate coverage" >> $GITHUB_STEP_SUMMARY
        echo "- 🟠 **3-7**: Partial (部分) - Limited data with some gaps" >> $GITHUB_STEP_SUMMARY
        echo "- 🔴 **0-2**: Insufficient (不足) - Minimal or poor quality data" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Next Steps**: Check logs, dashboard, and quality metrics for detailed analysis" >> $GITHUB_STEP_SUMMARY
=======
        echo "🎯 **Next Steps**: Check logs and dashboard for detailed analysis" >> $GITHUB_STEP_SUMMARY
>>>>>>> db9f3e3e8b34753ccab4237fc0b24ef959adc931
